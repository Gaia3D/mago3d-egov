<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="EgovDataDAO">
	<typeAlias  alias="DataVO" type="egovframework.let.mago3d.service.DataVO"/>
	
	<!-- Data 총 건수 -->
	<select id="EgovDataDAO.selectDataTotalCount" parameterClass="DataVO" resultClass="int">
		/* selectDataTotalCount */
		SELECT COUNT(data_id) 
		FROM data_info
	</select>
	
	<!-- Data 목록 -->
	<select id="EgovDataDAO.selectListData" parameterClass="DataVO" resultClass="DataVO">
		/* selectListData */
		SELECT X.*, 
			(SELECT project_name FROM project WHERE project_id = X.project_id) AS project_name
		FROM (
			SELECT *
			FROM data_info
			<isNotNull property="search_word">
				<isNotEqual property="search_word" compareValue="">
					<isNotNull property="search_value">
						<isNotEqual property="search_value" compareValue="">
							<isEqual property="search_option" compareValue="'1'.toString()">
								WHERE ${search_word} LIKE '%' || #search_value# || '%'
							</isEqual>
						</isNotEqual>
					</isNotNull>
				</isNotEqual>
			</isNotNull>
			ORDER BY insert_date DESC, data_id DESC
			
			OFFSET #offset# LIMIT #limit#
		) X
	</select>	
	
	
	<!-- 프로젝트별 Data 목록 -->
	<select id="EgovDataDAO.selectListDataByProjectId" parameterClass="DataVO" resultClass="DataVO">
		/* selectListDataByProjectId */
		WITH RECURSIVE project_data_info (
			data_id, data_key, data_name, parent, depth, view_order, mapping_type, latitude, longitude, height, heading, pitch, roll, public_yn, child_yn, attributes, insert_date, path, cycle
		) AS (
	        SELECT A.data_id, A.data_key, A.data_name, A.parent, A.depth, A.view_order, A.mapping_type,
	        	A.latitude, A.longitude, A.height, A.heading, A.pitch, A.roll,
	        	A.public_yn, A.child_yn, A.attributes, A.insert_date, ARRAY[A.view_order], false
			FROM data_info A
	        WHERE A.parent = 0 AND A.project_id = #project_id#
	        UNION ALL
	        SELECT A.data_id, A.data_key, A.data_name, A.parent, A.depth, A.view_order, A.mapping_type,
	        	A.latitude, A.longitude, A.height, A.heading, A.pitch, A.roll,  
	        	A.public_yn, A.child_yn, A.attributes, A.insert_date, path || A.view_order, A.parent = ANY(path)
	        FROM data_info A, project_data_info B
	        WHERE A.parent = B.data_id AND not cycle
		)
	    SELECT data_id, data_key, data_name, parent, depth, view_order, mapping_type, latitude, longitude, height, heading, pitch, roll, public_yn, child_yn, attributes, insert_date, path
	    FROM project_data_info
	    ORDER BY path
	</select>
		
	<!-- Data 정보 -->
	<select id="EgovDataDAO.selectData" parameterClass="long" resultClass="DataVO">
		/* selectData */
		SELECT A.*, B.project_name,
			CASE WHEN A.parent = 0 THEN 'TOP Node'
				ELSE (SELECT data_name FROM data_info WHERE data_id = A.parent)
			END AS parent_name
		FROM data_info A, project B
		WHERE data_id = #data_id#
			AND A.project_id = B.project_id
	</select>
	
	<!-- Project Data 정보 -->
	<select id="EgovDataDAO.selectDataByDataKey" parameterClass="DataVO" resultClass="DataVO">
		/* selectDataByDataKey */
		SELECT *
		FROM data_info
		WHERE project_id = #project_id# 
			AND data_key = #data_key#
	</select>
	
	<!-- Data 아이디 중복 체크 -->
	<select id="EgovDataDAO.selectDuplicationKeyCount" parameterClass="DataVO" resultClass="int">
		/* selectDuplicationKeyCount */
		SELECT COUNT(data_key) AS count 
		FROM data_info 
		WHERE project_id = #project_id# 
			AND data_key = #data_key#
	</select>
	
	<!-- 표시 순서 -->
	<select id="EgovDataDAO.selectViewOrderByParent" parameterClass="DataVO" resultClass="int">
		/* selectViewOrderByParent */
		SELECT COALESCE(MAX(view_order), 0) + 1 
		FROM data_info
		WHERE parent = #parent#
	</select>
	
	<!-- 한 프로젝트 내 Root Parent 개수를 체크 -->
	<select id="EgovDataDAO.selectRootParentCount" parameterClass="DataVO" resultClass="int">
		/* selectRootParentCount */
		SELECT COUNT(data_id) 
		FROM data_info 
		WHERE project_id = #project_id#
			AND parent = 0 
			AND depth = 1
			AND data_id != #data_id#
	</select>
	
	<!-- Data 등록 -->
	<insert id="EgovDataDAO.insertData" parameterClass="DataVO">
		/* insertData */
		<selectKey keyProperty="data_id" resultClass="long" type="pre">
    		SELECT NEXTVAL('data_info_seq')
  		</selectKey>
		INSERT INTO data_info(
			data_id, project_id, data_key, data_name, parent, depth, view_order, 
			location, latitude, longitude, height, heading, pitch, roll, description
			<isNotNull property="mapping_type">
				<isNotEqual property="attributes" compareValue="">
					, mapping_type
				</isNotEqual>
			</isNotNull>
			<isNotNull property="attributes">
				<isNotEqual property="attributes" compareValue="">
					, attributes
				</isNotEqual>
			</isNotNull>
		) values(
			#data_id#, #project_id#, #data_key#, #data_name#, #parent#, #depth#, #view_order#, 
			ST_GeographyFromText(#location#), #latitude#, #longitude#, #height#, #heading#, #pitch#, #roll#, #description#
			<isNotNull property="mapping_type">
				<isNotEqual property="attributes" compareValue="">
					, #mapping_type#
				</isNotEqual>
			</isNotNull>
			<isNotNull property="attributes">
				<isNotEqual property="attributes" compareValue="">
					, TO_JSON(#attributes#::json)
				</isNotEqual>
			</isNotNull>
		)
	</insert>
	
	<!-- Data 수정 -->
	<update id="EgovDataDAO.updateData" parameterClass="DataVO">
		/* updateData */
		UPDATE data_info
		SET 
			<isNotNull property="project_id">
				<isNotEqual property="project_id" compareValue="0">
					project_id = #project_id#,
				</isNotEqual>
			</isNotNull>
			<isNotNull property="data_key">
				<isNotEqual property="data_key" compareValue="">
					data_key = #data_key#,
				</isNotEqual>
			</isNotNull>
			<isNotNull property="data_name">
				<isNotEqual property="data_name" compareValue="">
					data_name = #data_name#,
				</isNotEqual>
			</isNotNull>
			<isNotNull property="mapping_type">
				<isNotEqual property="mapping_type" compareValue="">
					mapping_type = #mapping_type#,
				</isNotEqual>
			</isNotNull>
			<isNotNull property="location">
					location = ST_GeographyFromText(#location#),
			</isNotNull>
			<isNotNull property="latitude">
					latitude = #latitude#,
			</isNotNull>
			<isNotNull property="longitude">
					longitude = #longitude#,
			</isNotNull>
			<isNotNull property="height">
					height = #height#,
			</isNotNull>
			<isNotNull property="heading">
					heading = #heading#,
			</isNotNull>
			<isNotNull property="pitch">
					pitch = #pitch#,
			</isNotNull>
			<isNotNull property="roll">
					roll = #roll#,
			</isNotNull>
			<isNotNull property="public_yn">
				<isNotEqual property="public_yn" compareValue="">
					public_yn = #public_yn#,
				</isNotEqual>
			</isNotNull>
			<isNotNull property="attributes">
				<isNotEqual property="attributes" compareValue="">
					attributes = TO_JSON(#attributes#::json),
				</isNotEqual>
			</isNotNull>
			<isNotNull property="description">
				<isNotEqual property="description" compareValue="">
					description = #description#,
				</isNotEqual>
			</isNotNull>
			update_date = now()
		WHERE data_id = #data_id#
	</update>

	<!-- Data 삭제 -->
	<delete id="EgovDataDAO.deleteData" parameterClass="long">
		/* deleteData */
		DELETE FROM data_info WHERE data_id = #data_id#
	</delete>
	
	<!-- Data 총 건수(int) -->
	<select id="EgovDataDAO.selectDataInfTotalCount" parameterClass="DataVO" resultClass="int">
		/* selectDataInfTotalCount */
		SELECT COUNT(data_id) 
		FROM data_info
	</select>

</sqlMap> 